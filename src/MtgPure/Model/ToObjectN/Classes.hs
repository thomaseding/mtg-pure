{-# LANGUAGE ConstraintKinds #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE Safe #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilyDependencies #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}

{-# HLINT ignore "Avoid lambda" #-}
{-# HLINT ignore "Use const" #-}
{-# HLINT ignore "Redundant bracket" #-}

-- This file is generated by MtgPure.Model.ToObjectN.CodeGen
module MtgPure.Model.ToObjectN.Classes
  ( ToObject1 (..),
    ToObject2 (..),
    ToObject3 (..),
    ToObject4 (..),
    ToObject5 (..),
    ToObject6 (..),
    ToObject7 (..),
    ToObject8 (..),
    ToObject9 (..),
    ToObject10 (..),
    ToObject11 (..),
    ToObject12 (..),
  )
where

import safe Data.Inst
  ( Inst1,
    Inst10,
    Inst11,
    Inst12,
    Inst2,
    Inst3,
    Inst4,
    Inst5,
    Inst6,
    Inst7,
    Inst8,
    Inst9,
  )
import safe MtgPure.Model.IsObjectType (IsObjectType)
import safe MtgPure.Model.ObjectN (ObjectN (..))
import safe MtgPure.Model.ObjectType
  ( OT1,
    OT10,
    OT11,
    OT12,
    OT2,
    OT3,
    OT4,
    OT5,
    OT6,
    OT7,
    OT8,
    OT9,
  )

class Inst1 IsObjectType a => ToObject1 o a where
  toObject1 :: o -> (ObjectN (OT1 a))

class Inst2 IsObjectType a b => ToObject2 o a b where
  toObject2 :: o -> (ObjectN (OT2 a b))

class Inst3 IsObjectType a b c => ToObject3 o a b c where
  toObject3 :: o -> (ObjectN (OT3 a b c))

class Inst4 IsObjectType a b c d => ToObject4 o a b c d where
  toObject4 :: o -> (ObjectN (OT4 a b c d))

class Inst5 IsObjectType a b c d e => ToObject5 o a b c d e where
  toObject5 :: o -> (ObjectN (OT5 a b c d e))

class Inst6 IsObjectType a b c d e f => ToObject6 o a b c d e f where
  toObject6 :: o -> (ObjectN (OT6 a b c d e f))

class Inst7 IsObjectType a b c d e f g => ToObject7 o a b c d e f g where
  toObject7 :: o -> (ObjectN (OT7 a b c d e f g))

class Inst8 IsObjectType a b c d e f g h => ToObject8 o a b c d e f g h where
  toObject8 :: o -> (ObjectN (OT8 a b c d e f g h))

class Inst9 IsObjectType a b c d e f g h i => ToObject9 o a b c d e f g h i where
  toObject9 :: o -> (ObjectN (OT9 a b c d e f g h i))

class Inst10 IsObjectType a b c d e f g h i j => ToObject10 o a b c d e f g h i j where
  toObject10 :: o -> (ObjectN (OT10 a b c d e f g h i j))

class Inst11 IsObjectType a b c d e f g h i j k => ToObject11 o a b c d e f g h i j k where
  toObject11 :: o -> (ObjectN (OT11 a b c d e f g h i j k))

class Inst12 IsObjectType a b c d e f g h i j k l => ToObject12 o a b c d e f g h i j k l where
  toObject12 :: o -> (ObjectN (OT12 a b c d e f g h i j k l))
